1. Given a Tree Map<Long, Contact> which has phone numbers for keys and contact objects for values.
Write solutions to

Fetch all the keys and print them,
Fetch all the values and print them
Print all key-value pairs
Note:

Contacts should be stored in descending order of phone number

Contact Class:

PhoneNumer: Name: Email: Gender:

ans:


	

import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import tree.contact.gender;
public class contact {
	public static void main(String[] args)
	{
		Map<Long,Contact> map=new TreeMap<Long,Contact>();
		Contact c1=new Contact((long)1234567,"aksh","aksh@.com",gender.m);
		Contact c2=new Contact((long)8901234"sanu","sanu@.com",gender.m);
		Contact c3=new Contact((long)367458,"sun","sun@.com",gender.Fe);
		Contact c4=new Contact((long)878656,"tom","tom@.com",gender.m);
		map.put((long)1234567, c1);
		map.put((long)8901234, c2);
		map.put((long)367458, c3);
		map.put((long)878656, c4);
		 for(Map.Entry<Long, Contact> entry:map.entrySet()){  
			 Long key=entry.getKey();  
		        Contact c=entry.getValue();  
		        System.out.println(key+" Details:");  
		        System.out.println(c.phoneno+" "+c.name+" "+c.email+" "+c.g);  
		 }
		 System.out.println("............");
		 System.out.println("After Sorted:");
		        Map<Long,Contact> sortedMapDesc = new TreeMap<>(
		                Collections.reverseOrder());
		        sortedMapDesc.putAll(map);
		        for(Map.Entry<Long,Contact> entry1 : sortedMapDesc.entrySet())
		        {
		        	 Long key=entry1.getKey();  
				        Contact c8=entry1.getValue();  
				        System.out.println(key+" Details:");
		        System.out.println(c8.phoneno+" "+c8.name+" "+c8.email+" "+c8.g);  
		        }     
		    
	}
}
//class name - Contact
	
package tree;
import java.util.EnumSet;

public class Contact {
	long phoneno;
	String name,email;
	public enum gender {Fe,m}
	gender g;
	
	public Contact(long phoneno, String name, String email, gender g) {
		super();
		this.phoneno = phoneno;
		this.name = name;
		this.email = email;
		this.g = g;
	}
	public long getPhoneno() {
		return phoneno;
	}
	public void setPhoneno(long phoneno) {
		this.phoneno = phoneno;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public gender getG() {
		return g;
	}
	public void setG(gender g) {
		this.g = g;
	}
}





Q2. Write an application to store 10 unique product objects. In case there is an attempt to add a duplicate product, it should be silently rejected.
ans:
package collection;
import java.util.TreeSet;

public class addproduct {
	public static void main(String[] args)
	  {
		  TreeSet<String> t=new TreeSet<String>();
		  t.add("rohit sharma");
		  t.add("virat kohli");
		  t.add("bumrah");
		 t.add("hardik");
		 t.add("shardul");
		 t.add("bhuvneshwar");
		 t.add("chahar");
		 t.add("kartik");
		 t.add("pant");
		 t.add("ishan");
		 //duplicate
		 t.add("virat kohli");
		 System.out.println("TreeSet for cricketer Involves:");
		 for(String temp:t)
		 {
			 System.out.println(temp);
		 }
		 
		 
	  }


}


4. Given a Linked List of Objects representing date of birth's (use any inbuild java class to represent date), print the date's along with the message: Your date of Birth is DD-MM-YYYY, and it (was or was not) a leap year.
	

	 - E.g. For the date 23-12-2000
	

	   Your date of birth is 23-12-2000 and it was a leap year
	

	
	
	import java.time.LocalDate;
	import java.time.format.DateTimeFormatter;
	import java.util.LinkedList;
	
	public class LeapYear {
	
		public static void main(String[] args) {
			
			LocalDate date1 = LocalDate.of(2000, 03, 01);
			LocalDate date2 = LocalDate.of(2016, 01, 7);
			LocalDate date3 = LocalDate.of(1985, 11, 09);
			
			LinkedList<LocalDate> list = new LinkedList<LocalDate>();
			
			list.add(date1);
			list.add(date2);
			list.add(date3);
			
			for(LocalDate l : list)
			{
				String printDate = l.format(DateTimeFormatter.ofPattern("dd-MM-YYYY"));
				
				if(l.isLeapYear())
				{
					System.out.println("Your Date of Birth is " + printDate + " and it was a leap year");
				}
				else
				{
					System.out.println("Your Date of Birth is " + printDate + " and it was not a leap year");
				}
			}
	
		}
	
	}
	
Q3:     3. Store the employee objects in an TreeSet

import java.util.TreeSet;
import java.util.Comparator;
import java.util.Scanner;
public class emp1 {
	public static void main(String[] args)
	{
		TreeSet<Emp> name1=new TreeSet<Emp>(new nameComp());
		TreeSet<Emp> id1=new TreeSet<Emp>(new idComp());
		TreeSet<Emp> dep1=new TreeSet<Emp>(new depComp());
		TreeSet<Emp> sal1=new TreeSet<Emp>(new salComp());
		name1.add(new Emp(1,"OM","seadmin",2500.23));
		name1.add(new Emp(3,"ANJU","SE",4399.23));
		name1.add(new Emp(4,"SAM","HR",3422.78));
		name1.add(new Emp(8,"RAJ","gmadmin",2500.23));
		name1.add(new Emp(5,"JOE","admin",3400.23));
		
		id1.add(new Emp(1,"OM","seadmin",2500.23));
		id1.add(new Emp(3,"ANJU","SE",4399.23));
		id1.add(new Emp(4,"SAM","HR",3422.78));
		id1.add(new Emp(8,"RAJ","gmadmin",2500.23));
		id1.add(new Emp(5,"JOE","admin",3400.23));
		
		dep1.add(new Emp(1,"OM","seadmin",2500.23));
		dep1.add(new Emp(3,"ANJU","SE",4399.23));
		dep1.add(new Emp(4,"SAM","HR",3422.78));
		dep1.add(new Emp(8,"RAJ","gmadmin",2500.23));
		dep1.add(new Emp(5,"JOE","admin",3400.23));
		
		sal1.add(new Emp(1,"OM","seadmin",2500.23));
		sal1.add(new Emp(3,"ANJU","SE",4399.23));
		sal1.add(new Emp(4,"SAM","HR",3422.78));
		sal1.add(new Emp(8,"RAJ","gmadmin",2500.23));
		sal1.add(new Emp(5,"JOE","admin",3400.23));
		
		
		int s;
		Scanner sc=new Scanner(System.in);
				System.out.println("Enter:");
		s=sc.nextInt();
		switch(s)
		{
		
		case 1:	for(Emp e:name1)
		{
			System.out.println(e);
		}
		break;
		case 2: for(Emp e1:id1)
		{
			System.out.println(e1);
	}
		break;
		case 3:for(Emp e2:dep1)
		{
			System.out.println(e2);
		}
		break;
		case 4:for(Emp e3:sal1)
		{
			System.out.println(e3);
		}
		break;
	}
} 
}
import java.util.Comparator;

class nameComp implements Comparator<Emp>{
		public int compare(Emp e1, Emp e2)
		{
			return e1.getName().compareTo(e2.getName());
		}
	}

import java.util.Comparator;
public class depComp  implements Comparator<Emp>{
	public int compare(Emp e1, Emp e2)
	{
		return e1.getDept().compareTo(e2.getDept());
	}
}
import java.util.Comparator;
public class idComp implements Comparator<Emp> {
		public int compare(Emp e1, Emp e2)
		{
			if(e1.getId()>e2.getId())
			return 1;
			else
			{
				return -1;
			}
		}	
	}
import java.util.Comparator;
public class idComp implements Comparator<Emp> {
		public int compare(Emp e1, Emp e2)
		{
			if(e1.getId()>e2.getId())
			return 1;
			else
			{
				return -1;
			}
		}

		
	}
public class Emp {
	
	    private int id;
	    private String name,dept;
	    private double salary;
		
		
		
		public Emp(int id, String name, String dept, double salary) {
			super();
			this.id = id;
			this.name = name;
			this.dept = dept;
			this.salary = salary;
		}


		public int getId() {
			return id;
		}


		public void setId(int id) {
			this.id = id;
		}


		public String getName() {
			return name;
		}


		public void setName(String name) {
			this.name = name;
		}


		public String getDept() {
			return dept;
		}


		public void setDept(String dept) {
			this.dept = dept;
		}


		public double getSalary() {
			return salary;
		}


		public void setSalary(double salary) {
			this.salary = salary;
		}
		public String toString()
		{
			return "Id:"+this.id +" " +"name:"+this.name+" " +"dept:"+this.dept+" " +"sal:"+this.salary ;
		}
}	
